 함수

lower : 소문자로 변환
 ex) where lower(ename)='jones';

upper : 대문자로 변환

initcap : 첫글자만 대문자로 나머지는 소문자로 변환
 ex) where initcap(ename)='Scott';

length : 문자길이를 알려줌

lengthb : byte로 나타냄

==========================08 / 24

CONCAT: 문자열을 결합하는 함수
ex) select '풀스택반', '화이팅', concat('풀스택반', '화이팅') from dual;

SUBSTR(대상, 시작위치, 추출할 개수) : 문자열을 추출
ex ) select * from employee where substr(ename,-1,1)='N';
ㄴ N으로 끝나는 사원 출력하기
ex) select substr('computer', 4, 3), substr('computer', -3, 3) from dual;

INSTR(대상, 찾을 문자, 시작위치, ,몇번째 발견) : 특정문자의 위치값을 반환
ex 1) select instr('computer', 'm') from dual;
ㄴ computer에 m이 몇번째 위치인지 알려줌.  시작위치, 몇번째발견은 생략함.
ex 2) select instr ('computer maniama', 'm', 5, 2) from dual;
ㄴ 5번째(u)부터 2번째 m까지의 길이 출력
// 이름의 세번쨰 자리가 'R'인 사원을 검색하여 추출
// select * from employee where instr(ename, 'R', 3, 1) = 3;

LPAD, RPAD  => 입력받은 문자열과 기호를 정렬하여 특정 길이의 문자열로 반환
※ LPAD 레프트패딩,   RPAD 라이트패딩
ex) 
select lpad(salary, 10, '*') from employee;
대상값을 오른쪽에 채우고 왼쪽 남는 공간은 *로 10자리를 채움
    ******1300
select rpad(salary, 10, '*') from employee;
대상값을 왼쪽에 채우고 오른쪽 남는 공간은 *로 10자리를 채움
    2450******

TRIM : 잘라내고 남은 문자를 표시
ex 1) select trim ('   computer     ') from dual;
ex 2) select trim ('c' from 'computer') from dual;
ㄴ 맨처음이나 맨끝 문자를 잘라낼 수 있음, 중간문자는 안됨



*****숫자 함수*****

CEIL : 올림
ex) select ceil(10.123), ceil(10.621), ceil(10.001) from dual;
   ㄴ 값 11    11    11	// 정수를 반환함

FLOOR : 버림
ex) select floor(10.123), floor(10.621), floor(10.001) from dual;
   ㄴ 값 10    10    10	// 정수를 반환함

ROUND : 반올림
ex) select round(98.7654), round(98.7654,2),round(98.7654,-1) from dual;
   ㄴ 값 99    98.77    100
 ()안에 ,2는 소수3째자리에서 반올림시켜 소수점2째자리까지 출력
 ()안에 ,-1을 입력시 1의자리에서 반올림이 되어 출력됨

TRUNC : 특정자리수를 잘라냄
ex) select trunc(98.7654), trunc(98.7654,2),trunc(98.7654,-1) from dual;
   ㄴ 값 98    98.76    90

MOD : 나머지를 알려줌   ex)  mod(5,2) = 5/2 나머지1
ex) select mod(31,2), mod(31,5), mod(31,8) from dual;
   ㄴ 값 1    1    7



*****날짜 함수*****

오늘날짜를 알려줌.
select sysdate from dual;     오늘
select sysdate+1 from dual;  내일
select sysdate-1 from dual;   어제

select sysdate-hiredate 근무일수 from employee;
select round(sysdate-hiredate) 근무일수 from employee;

MONTHS_BETWEEN(data1,date2) : 날짜와 날짜 사이의 개월 수
ex) select trunc(months_between(sysdate, hiredate)) from employee;

ADD_MONTHS(date,n) : 특정 개월 수를 더한 날짜
ex) select ename, hiredate, add_months(hiredate,6) from employee;

NEXT_DAY(date,요일)
ex) select sysdate, next_day(sysdate, '토요일') from dual;
작성한 날짜로부터 최초로 도달하는 일자를 출력
ex) select sysdate, next_day(sysdate, 1) from dual;
일요일은 1 월요일은 2 ... 토요일은 7

LAST_DAY(날짜) : 해당 날짜가 속한 달의 마지말 날짜를 반환
ex) select ename, hiredate, last_day(hiredate) from employee;


*****형 변환 함수*****

TO_CHAR : 날짜형 혹은 숫자형을 문자형으로 변환
TO_DATE : 문자형을 날짜형으로 변환
TO_NUMBER : 문자형을 숫자형으로 변환

YYYY 연도 표현(4자리)   YY 연도표현(2자리)
MM 월을 숫자로 표현   MON 월을 문자로 표현
DAY 요일 표현   DY 요일을 약어로 표현

///// 날짜형을 문자형으로
ex) select ename, hiredate, to_char(hiredate, 'yy-mm'), to_char(hiredate, 'yyyy/mm/dd day') from employee;
ex) select to_char(sysdate, 'yyyy-mm-dd, hh24:mi:ss') from dual;
ㄴ  hh24 = 24시간으로 표현됨 , mm은 '달' mi는 '시'  ss는 '초'

///// 숫자형을 문자형으로
ex) select ename, to_char(salary, '00000000') from employee;
ㄴ salary를 표시하고 남은 자리수는 0으로 채워짐
ex) select ename, to_char(salary, '9,999,999') from employee;
ㄴ ,를 기준으로 ,를 찍어 출력해줌
ex) select ename, to_char(salary, 'L9,999,999') from employee;
ㄴ  L은 각 지열별 통화기호를 붙여줌  ex) \5,000     \2,800

select ename, hiredate from employee where hiredate = to_date(19810220);
select to_number('100000')-to_number('50000') from dual;
ㄴ 문자끼리는 연산이 안되기 때문에 숫자로 변환

*****일반함수*****

NVL(수식 또는 값, 수식 또는 값) : null 값을 0 또는 다른 값을 반환
ex ) select ename salary, commission, salary*12+nvl(commission,0) from employee order by job;

NVL2(ex1, ex2, ex3) : ex1을 검사하여 결과가 null이 아니면 
		   ex2를 반환하고, null이면 ex3을 반환.
ex) select ename salary, commission, nvl2(commission,salary*12+commission, salary*12) from employee order by job;

NULLIF(ex1, ex2) : 두 표현식을 비교해 동일한 경우 null 반환
		동일하지 않으면 첫번째 표현식 반환.

COALESCE(ex1, ex2, ...exn)
select ename, salary, commission, coalesce(commission, salary, 0) from employee order by job;
    ㄴ coalesce(commission, salary, 0)  commission이 없으면 salary가 출력, salary도 없으면 0이 출력됨

DECODE(표현식, 조건1, 결과1, 조건2, 결과2, 조건3, 결과3 ... 결과N)
ㄴ 자바의 switch와 비슷.
ex) select ename, dno, decode(dno, 10, 'accounting', 20, 'research', 30, 'salesman', 40, 'operations', 'default') as dname from employee;
ㄴ 10이면 accounting 20이면 research ... 이외는 default가 출력

CASE 수식   // 수식이 조건1과 비슷하면 결과1, 2와 비슷하면 결과2
WHEN 조건1 THEN 결과1         // if else와 비슷
WHEN 조건2 THEN 결과2
WHEN 조건3 THEN 결과3
....
ELSE 결과 N 
END

ex) select ename, dno,
    case when dno = 10 then 'accounting' 
    when dno = 20 then 'research' 
    when dno = 30 then 'salesman' 
    when dno = 40 then 'operations' 
    else 'default' 
    end
    as dname from employee;


=========================8 / 25

*****그룹함수*****

SUM : 그룹의 누적합계
AVG : 그룹의 평균
COUNT : 그룹의 총 개수
MAX : 그룹의 최대값
MIN : 그룹의 최소값

select sum(salary) as 급여총액, AVG(salary) as 급여평균, max(salary) as "최대 급여", min(salary) 최소급여 from employee;
select max(hiredate), min(hiredate) from employee;
select sum(commission) as "커미션 총액" from employee;
select count(*) as "전체 사원수" from employee;
ㄴ 레코드(행)의 개수를 알려줌
select count(commission) as "커미션 받는 사원수" from employee;
ㄴ null값이 아닌 레코드(행)의 개수를 알려줌
	↓ 위 설명과 동일  
select count(*) as "커미션 받는 사원수" from employee where commission is not null;
select count(distinct job) as "직업 종류의 개수" from employee;
ㄴ distinct : 중복되는것은 1번만 카운트함

데이터그룹 : GROUP BY 절
select dno as "부서번호", avg(salary) as "급여평균" from employee group by dno;
ㄴ  group by dno : 부서별로 묶어서 급여평균이 출력됨.

그룹 결과 제한 : HAVING 절
select dno,max(salary) from employee group by dno having max(salary) >= 3000;
select job, count(*), sum(salary) from employee where job not like '%MANAGER%' group by job having sum(salary) >= 5000 order by sum(salary);

문제~~
1) 모든사원의 급여 최고액,최저액,총액 및 평균 급여를 출력하시오. 평균은 정수로 반올림하시오
 select max(salary), min(salary), sum(salary), floor(avg(salary)) from employee;

2) 담당업무 유형별 급여 최고액, 최저액 총액 및 평균 급여를 출력하시오. 평균은 정수로 반올림하시오
select job, max(salary), min(salary), sum(salary), floor(avg(salary)) from employee group by job;

3) 담당업무가 동일한 사원수를 출력하시오.
select job 담당업무, count(*) 사원수 from employee group by job;

4) 관리자 수를 나열하시오.
select count(manager) 관리자수 from employee;

5) 급여 최고액과 급여 최저액의 차액을 출력하시오.
select max(salary) - min(salary) 급여차액 from employee;

6) 직급별 사원의 최저 금액을 출력하시오 (단, 최저급여가 2000 미만인 그룹은 제외시키고 급여에 대한 내림차순으로 정렬하여 출력하시오.)
select job, min(salary) from employee group by job having min(salary) > 2000 order by min(salary)desc;

7) 각 부서에 대해 사원수와 평균 금여를 출력하시오. (평균 급여는 소수점2째자리로 반올림)
select decode(dno,10,'ACCOUNTING', 20,'research', 30,'salesman') 부서이름, count(*) 사원수, round(avg(salary),2) 평균급여 from employee group by dno;

==================================

조인 - 여러 테이블에 저장된 데이터를 한번에 조회해야 할 필요가 있을때 사용
조인은 2개 이상의 테이블을 결합한다는 의미
select * from employee, department;
ㄴ 조인 조건없이 모든 조합을 표시하는 카디시안 곱

EQUI JOIN : (equal) 비교를 통해 같은 값을 가지는 행을 연결하여 결과를 생성하는 조인방법
 : select table1.column, table2.column, ... from table1, table2 where table1.column = table2.column;
ex) select * from employee, department where employee.dno = department.dno;
ex) select eno, ename, dname from employee, department where employee.dno = department.dno and eno = 7788;

select eno, ename, dname from employee, department where employee.dno = department.dno and eno = 7788;
	↓ 로 바꾸면 오류없이 잘 출력됨. (dno가 employee와 department에 둘 다 있기 때문에 오류 발생)
select employee.eno, employee.ename, department.dname, employee.dno from employee, department where employee.dno = department.dno and employee.eno = 7788;
(위와 동일 !) select eno, ename, dname, employee.dno from employee, department where employee.dno = department.dno and eno = 7788;

NATURAL JOIN : 오라클에서 자동적으로 테이블의 모든 컬럼을
 대상으로 일치하는 데이터 유형 및 이름을 가진 공통 컬럼을
 조사한 후 자동으로 조인을 수행해주는 키워드
ex) select e.eno, e.ename, d.dname, dno from employee e natural join department d where e.eno = 7788;
JOIN ~ USING : 
ex) select e.eno, e.ename, d.dname, dno from employee e join department d using(dno) where e.eno = 7788;
JOIN ~ ON : 
ex) select e.eno, e.ename, d.dname, e.dno from employee e join department d on e.dno = d.dno where e.eno = 7788;

NON-EQUI JOIN : where 절에 <, between a AND b , = 조건이 아닌 연산자를 사용

SELF JOIN : 하나의 테이블에 있는 컬럼끼리 연결해야 하는
	 조인이 필요한 경우에 사용
ex 1) select emp.ename as "사원이름", mag.ename as "직속상관이름" from employee emp, employee mag where emp.manager = mag.eno;
ex 2) select other.ename, other.hiredate from employee ward, employee other where other.hiredate > ward.hiredate and ward.ename = 'WARD' order by hiredate;
※ SELF JOIN은 반드시 별칭을 이용해야함.

OUTER JOIN : EQUI JOIN의 조건에서 어느 한쪽이 NULL값이면
 	조인 결과로 얻어지지 않는다.
OUTER JOIN은 +연산자를 이용해 NULL이 존재하는 테이블에도
	결과를 출력할 수 있다.
ex) select emp.ename || '의 직속 상관은' || mag.ename from employee emp, employee mag where emp.manager = mag.eno(+);
ㄴ (SELF JOIN의 ex)에서 맨뒤에 (+)를 추가해줌.
	↓ 위와 결과는 동일
ex) select emp.ename || '의 직속 상관은' || mag.ename from employee emp left outer join employee mag on emp.manager = mag.eno(+);


========================8 / 26

서브쿼리 : 쿼리문에 삽입된 SELECT문을 말한다.
select 컬럼명 from 테이블명 where ex1 operator( select 컬럼명 from 테이블명 where 조건);
ex 1) select ename, salary from employee where salary > (select salary from employee where ename = 'SCOTT');
 ㄴ ex2) select salary from employee where ename = 'SCOTT';
     ex2) select ename , salary from employee where salary > 3000;
     ㄴ ex2 2개를 치지않고 ex1처럼 1줄로 작성가능. 
ex1의 ( )가 서브쿼리, 얻어지는 결과가 1개로 단일행 서브쿼리임

*단일행 서브쿼리 예시
┌ select dno, min(salary) from employee group by dno having min(salary) > (select min(salary) from employee where dno = 30);
│  select ename, job, salary from employee where salary = (select min(salary) from employee);
└  단일 행 서브쿼리 : 내부쿼리로 얻어지는 결과가 1개 ( 단일행 비교연산자 : = > >= < <= <> )

다중 행 서브쿼리 : 내부쿼리로 얻어지는 결과가 여러개 ( 다중행 비교연산자 : IN ANY ALL SOME EXISTS )
IN : 서브쿼리의 결과중 하나라도 일치하면..
select eno, ename from employee where salary in(select min(salary) from employee group by dno);

ANY, SOME : 서브쿼리의 결과가 하나 이상이 일치하면..
< ANY : 최대값보다 작음
> ANY : 최소값보다 큼
= ANY : IN과 동일
 select eno, ename, job, salary from employee where salary < any(select salary from employee where job = 'SALESMAN') and job <> 'SALESMAN';

ALL : 서브쿼리의 결과가 모든 값이 일치하면..
> ALL : 최대값보다 큼
< ALL : 최소값보다 작음
 select eno, ename, job, salary from employee where salary < all(select salary from employee where job = 'SALESMAN') and job <> 'SALESMAN';

EXISTS : 서브쿼리의 결과중에 만족하는 값이 하나라도 존재하면..
 select dno, dname from department d where exists (select dno from employee e where d.dno = e.dno);

문제==
select ename, job from employee where salary = (select salary from employee where eno = 7499);
select ename, job from employee where salary > (select salary from employee where eno = 7499);
select ename, job, salary from employee where salary = (select min(salary) from employee);
select job, round(avg(salary),1) from employee group by job having round(avg(salary),1) = (select min(round(avg(salary),1)) from employee group by job);
select eno, ename, job, salary from employee where salary < any(select salary from employee where job = 'ANALYST') and job <> 'ANALYST';
select ename, hiredate from employee where dno = (select dno from employee where ename = 'BLAKE') and ename <> 'BLAKE';
select eno, ename from employee where salary > (select avg(salary) from employee)order by salary;
select count(salary) "평균급여보다 급여를 많이 받는 사원의 수" from employee where salary > (select avg(salary) from employee)order by salary;
select ename, dno, job from employee where dno = (select dno from department where loc = 'DALLAS'); 
select ename, salary from employee where manager = (select eno from employee where ename = 'KING');














