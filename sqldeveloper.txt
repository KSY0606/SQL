PL/SQL(Procedural Language for SQL)- 절차적 프로그래밍

인덱스 : 테이블에 있는 데이터를 빨리 찾기 위한 용도의 데이터베이스객체
오라클 내부에서 컬럼을 찾기 위해 트리구조로 만들어짐

** 인덱스를 만드는 이유     <=>     사용하지 말아야 할 경우
1. 테이블에 행의 수가 많을 경우 <=> 테이블에 행의 수가 적을때
2. where문에 해당 컬럼이 많이 사용될때
3. 검색결과가 전체 데이터의 2% ~ 4% 정도일때 <=> 10% ~ 15%

CREATE INDEX  인덱스이름 ON 테이블명(컬럼명);

select index_name, table_name, column_name from user_ind_columns where table_name in('EMPLOYEE', 'DEPARTMENT');

인덱2스 생성
CREATE INDEX idx_emp_ename ON employee(ename);

인덱스 제거
DROP INDEX idx_emp_ename;

고유 인덱스
CREATE UNIQUE INDEX idx_emp_ename ON employee(ename);
비고유 인덱스
CREATE INDEX idx_emp_ename ON employee(ename);
결합 인덱스    department의 dname과 loc를 하나로 묶어서 인덱스 생성
CREATE INDEX idx_emp_dept_com ON department(dname, loc);
함수 기반 인덱스
CREATE INDEX idx_emp_sal_cal ON employee(salary*12);

===============================
● 시노님(Synonym) : 동의어

CREATE OR REPLACE  SYNONYM syn_emp FOR employee;
 ㄴ employee테이블에 별명을 달아주는 것.(syn_emp)

** 시노님 권한 부여
시스템계정에서 grant select on hr.syn_emp to productdb;
(( grant 후 제품계정에서 select * from hr.syn_emp; 작성시 employee 출력))

** 시노님 권한 삭제
시스템 계정에서 drop synonym syn_emp;


** 권한 부여
시스템 계정에서 grant select on hr.employee to productdb;
 ㄴ productdb에서 hr안의 employee테이블을 검색 할 수 있는 권한을 준다는 뜻.
 ㄴ grant select, update, delete hr.~~~로 쓰면 전부 권한을 받게 됨
(( grant 후 제품계정에서 select * from hr.employee; 작성시 employee 출력))

** 권한 삭제
시스템 계정에서 revoke select on hr.employee from productdb;
(( revoke 후 제품계정에서 select * from hr.employee; 작성시 employee 미출력))


● 시퀸스 생성 : 자동 순번을 반환하는 데이터베이스 객체
CREATE SEQUENCE 시퀸스이름
INCREMENT BY 증감숫자
START WITH 시작숫자  // 시작숫자 미작성시 1부터시작. 100작성시 100부터 시작
MINVALUE 최소값
MAXVALUE 최대값
CYCLE  최대값에 도달시 최소값으로 돌아감
CACHE 메모리에 공간할당

구조만 복사 ( 데이터는 복사X )
CREATE TABLE dept_copy2 as select * from department where 0=1;

CREATE SEQUENCE dno_seq INCREMENT BY 10 START WITH 10;
 ㄴ 시작값을 10으로 하고 10씩 증가한다.
INSERT INTO dept_copy2 VALUES(dno_seq.nextval, 'ACCOUNTING', 'NEW YORK');
 ㄴ dno 자리에 시작값인 10 출력.
INSERT INTO dept_copy2 VALUES(dno_seq.nextval, '영업부', 'SEOUL');
 ㄴ dno 자리에 20이 출력  nextval때문에 자동으로 증가된 값이 출력
select dno_seq.currval from dual; 
 ㄴ 현재까지 쓰여진 시퀴스의 순번이 보여짐.  // currval : 현재값을 보여줌.

** 시퀸스 삭제
drop sequence don_seq;	


● MERGE문 : 조건을 비교해서 테이블에 해당 조건에 맞는 데이터가 없으면
		insert 해주고, 있으면 update 해주는 문장.

MERGE INTO 테이블명
   USING (update나 insert될 데이터 원천)
   ON (update될 조건)
WHEN MATCHED THEN
   UPDATE SET 컬럼1=값1, 컬럼2=값2...
WHERE update 조건
   DELETE WHERE update_delete 조건
WHEN NOT MATCHED THEN
   INSERT (컬럼1, 컬럼2...) VALUES(값1, 값2...)
   WHERE insert조건;

 ** 위 merge문 작성한 것 활용 예시.
merge into emp ec
   using (select eno, salary, manager from employee where manager = 7451) eo
   on (ec.eid = eo.eno)
when matched then
   update set ec.bonus = eo.salary*0.3
when not matched then
   insert (ec.eid, ec.bonus) values (eo.eno, eo.salary*0.1)
   where (eo.salary > 3000);

 * emp 라는 테이블 생성
CREATE TABLE emp (eid number(4), bonus number(7));
insert into emp values (1451, 0);   //  레코드 추가
insert into emp values (1501, 0);
insert into emp values (1743, 0);
insert into emp values (1812, 0);
insert into emp values (1941, 0);


===========================================
===========================================9/1
* SQL (structured query language) : 데이터베이스를 구축하고
				활용하기 위해 사용되는 언어
* 데이터 정의어(DDL) , 데이터조작어(DML)
* PL/SQL : 오라클에서 지원하는 프로그래밍 언어의 특성을 수용하여 SQL에서는
	 사용할 수 없는 절차적 프로그래밍 기능

grant select on hr.employee to public;
 ㄴ 뒤에 테이블 명을 적지 않으면 모든 사용자에게 권한을 줌

권한해제
revoke select on hr.employee from productdb;
 ㄴ productdb 테이블에서도 employee가 출력되는걸 막음

1. 변수, 상수 등을 선언
2. if문을 사용하여 조건에 따라 문장들을 분기
3. loof문을 사용하여 일련의 문장을 반복적으로 실행
4. 커서를 사용하여 여러 행을 검색

declare 선언부
begin 실행부
exception 예외처리부
END; 를 써줘야함. 하나의 명령블럭이 끝났다는 것을 명시.
 ** 맨 마지막에 / 를 꼭 작성해야 PL/SQL 종결된거로 간주해 쿼리문을 수행해줌.
     ㄴ sql plus에서 사용할 경우!
단일행 주석 --    ,   여러행 주석 /*  */

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ DECLARE 예시
DECLARE
   num number;
   BEGIN
      num:=50;
      DBMS_OUTPUT.PUT_LINE('오라클 PL/SQL 입문 환영');
      DBMS_OUTPUT.PUT_LINE(num);
   END;
   /
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
boolean => true, false, null 
integer
상수명 constatnt 데이터타입 := 상수값; 

declare
a integer := 10*50+5*6;
begin
dbms_output.put_line('a의 결과=' || to_char(a));
   END;
   /
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  문제2↓
v_eno number(4);
v_ename employee.ename%type;

v_eno employee.eno%type;
 dbms_output.put_line('사원번호    사원이름');
 dbms_output.put_line('==============');
 select eno, ename into v_eno, v_ename from employee where ename = 'SCOTT';
 ㄴ emlployee의 eno와 ename을 v_eno , v_ename에 할당해준다.  where ename이 SCOTT인 사원만
 dbms_output.put_line(v_eno || '    ' || v_ename);
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
========================================== 문제3,4↓
***** IF *****		● 조건문
if 조건 then    // 조건이 만족하면 then 밑의 명령문들 수행.   ● 조건문
 명령문;
 ....
END if;
*************
if 조건 then    // 조건이 거짓일 경우 else 실행
 명령문;
 ....;
else
 명령문;
 ....;
END if;
*************
if 조건 then
 명령문;
 ....;
elsif 조건 then
 명령문;
 ....;
 elsif 조건 then
 명령문;
 ....;
 else
 명령문;
  ....;
END if;

==========================================
***** LOOP *****		● 반복문
loop
 명령문;
 ...;
 exit when 조건;
end loop;

● 구구단 예제
declare
 dan number := 9;
  i number := 1;
begin
 dbms_output.put_line('**' || dan || '단 **');
 loop
  dbms_output.put_line(dan || ' X ' || i || ' = ' || dan * i);
  i := i+1;
  exit when i > 9;
end loop;
end;
/

***** FOR *****
for 변수 in 초기값.. 최종값
 loop
 명령문 ...
 ...
end loop;

● for 예제   ( loop 예제와 큰 차이 없음 )
declare
 dan number := 9;
  i number := 1;
begin
 dbms_output.put_line('**' || dan || '단 **');
 for i in 1..9                 //  for i in reverse 1..9 로 작성시 거꾸로 돔
 loop
  dbms_output.put_line(dan || ' X ' || i || ' = ' || dan * i);
end loop;
end;
/


***** WHILE *****
while 조건 loop
 명령문...
 ...
end loop;

● while 예제      // i := i+1; 미작성시 무한루프
declare
 dan number := 9;
  i number := 1;
begin
 dbms_output.put_line('**' || dan || '단 **');
 while i <= 9
 loop
  dbms_output.put_line(dan || ' X ' || i || ' = ' || dan * i);
  i := i+1;
end loop;
end;
/

==========================================
***** CURSOR *****
커서 : 특정 SQL문장을 처리한 결과를 담고 있는 영역을 가리키는 일종의 포인터

선언부
cursor 커서명 is 문장;   // 문장 = select문
실행부
open 커서명;
fetch 커서명 into 변수명;
close 커서명

커서의 속성
%NOTFOUND : 커서 영역의 자료가 모두 FETCH 되었으면 TRUE
%FOUND : 커서 영역에 FETCH 되지 않은 자료가 있다면 TURE
%ISOPEN : 커서가 오픈된 상태이면 TRUE
%ROWCOUNT : 커서가 얻어 온 레코드의 개수

● cursor 예제
declare
 v_dept department%rowtype;
 cursor c1 is select * from department;
begin
 dbms_output.put_line('부서번호   부서명   지역명');
 dbms_output.put_line('======================');
 open c1;
 loop
  fetch c1 into v_dept.dno, v_dept.dname, v_dept.loc;
  exit when c1%notfound;
  dbms_output.put_line(v_dept.dno || '   ' || v_dept.dname || '   ' || v_dept.loc);
 end loop;
 close c1;
end;
/

***부서번호가 10 인 사원들만 출력.
declare
 v_emp employee%rowtype;
 cursor c1 is select eno, ename, job, salary from employee where dno = 10;
begin
 dbms_output.put_line('사원번호   이름   업무명   급여');
 dbms_output.put_line('==============================');
 open c1;
 loop
  fetch c1 into v_emp.eno, v_emp.ename, v_emp.job, v_emp.salary;
  exit when c1%notfound;
  dbms_output.put_line(v_emp.eno || '   ' || v_emp.ename || '   ' || v_emp.job || '   ' || v_emp.salary);
 end loop;
 dbms_output.put_line('==============================');
 dbms_output.put_line('총 검색 자료수 = ' || c1%rowcount);
 close c1;
end;
/

==========================================
========================================== 9 / 2
						   문제 5 ↓
PL/SQL  프로그램의 종류는 함수, 프로시저, 트리거로 나뉜다.
create or replace function 함수이름(매개변수...)
return 데이터타입
is 변수, 상수 등을 선언
begin
명령문..
...
return 반환값;
exception 예외처리	부 	// 자주 생략됨
end;

매개변수 없을경우			매개변수 있을 경우
함수명()				  함수명(매개변수)

↓ 함수 만들고 출력 예시 // NONEDITIONABLE 는 저장시 자동생성됨

create or replace NONEDITIONABLE function fn_salary_name(v_ename in employee.ename%type)
return number
is v_salary number(7,2);
begin
 select salary into v_salary from employee where ename = v_ename;
 return v_salary;
 end;

variable v_salary number;
execute :v_salary:=fn_salary_name('SCOTT');
print v_salary;


***2번예제
create or replace NONEDITIONABLE function my_mod(num1 number, num2 number)
return number
is 
 v_remain number := 0; --반환할 나머지값
 v_quot number := 0; -- 몫
begin
 v_quot := floor(num1 / num2);
 v_remain := num1 - (num2 * v_quot);
 return v_remain;
end;

select my_mod (20,3) 나머지 from dual;

=========================================

프로시저 : 특정한 로직처리 (서브 프로그램)  //  함수와 다르게 return이 없음.
create or replace procedure 프로시저이름(매개변수 ...)
is
변수, 상수 등 선언
begin
 명령문...
 ....
end;


*** 예제1
create or replace procedure sp_salary
is
v_salary employee.salary%type;
begin
 select salary into v_salary from employee where ename = 'SCOTT';
 dbms_output.put_line('SCOTT의 급여는 ' || v_salary);
end;

execute sp_salary

☆ drop procedure sp_salary;  // SQL PLUS를 사용할 경우 !  입력하면 삭제됨. developer도 가능.

*** 예제2
create or replace procedure salary_name(v_ename in employee.ename%type)
is
v_salary employee.salary%type;
begin
 select salary into v_salary from employee where ename = v_ename;
 dbms_output.put_line(v_ename || '의 급여는 ' || v_salary);
end;

exec salary_name('KING');

*** 예제3
create or replace procedure new_product
(p_id in producttbl.productid%type,
p_name in producttbl.productname%type,
p_amount in producttbl.amount%type,
p_price in producttbl.price%type,
p_maker in producttbl.maker%type) is
begin
 insert into producttbl values(p_id, p_name, p_amount, p_price, p_maker);
 commit;
end;

exec new_product('sb5412', '스마트TV', 30, 860000, '삼보');

exec new_product('ss6545', '컴퓨터', 15, 1200000, '삼성');

select * from producttbl;

===========================================
=========================================== 9 / 5

사원이름으로 조회해서 사원의 급여를 얻어오기 위해 급여를 OUT으로 지정

일반 실행 프로시저 : execute 프로시저 이름
OUT을 지정한 프로시저
1. OUT 매개변수로 나올 변수를 선언
2. OUT 매개변수에서 값을 받아오기 위해서 프로시저 호출 변수 앞에 :을 덧붙임
3. 프로시저에서 얻어온 결과값을 저장하고 있는 바인드변수를 출력하기 위해 print 명령문을 사용

create procedure pd_salary_ename (v_ename in employee.ename%type, v_salary out employee.salary%type)
is
begin
 select salary into v_Salary from employee where ename=v_ename;
end;

variable v_salary varchar2(14);
execute pd_salary_ename('SCOTT', :v_salary);
print v_salary;


트리거 : 어떤 이벤트가 발생했을때 내부적으로 실행되도록 데이터베이스에 저장된 프로시저를 말한다.
( 이벤트가 발생하면 자동으로 실행되는 프로시저 )
함수나 프로시저는 사용자가 원할때 execute문으로 직접 호출하여 실행
AFTER 트리거 : DML( INSERT, UPDATE, DELETE ) 등의 작업이 일어난 후에 실행되는 프로시저
BEFORE 트리거 : 이벤트가 발생하기 전에 작동하는 프로시저
CREATE TRIGGER 트리거이름
타이밍[BEFORE | AFTER] 이벤트[INSERT | UPDATE | DELETE]

ON 테이블이름
 ...
BEGIN
 명령문
 ...
END;

:NEW.컬럼명 : 변경 후의 컬럼
:OLD.컬럼명 : 변경 전의 컬럼  

create or replace trigger tri_dept after insert   -- insert 이후에 자동적으로 실행되도록 작성.
on dept_original for each row 
begin
 insert into dept_back values(:new.dno, :new.dname, :new.loc); 
end;

insert into dept_original values(10, 'ACCOUNTING', 'NEW YORK');

select * from dept_back;  ,  select * from dept_original;  모두 값이 같음

 // dept_original에 insert를 하면 dept_back에 자동적으로 trigger가 실행됨


create or replace trigger tri_del after delete
on dept_original for each row
begin
 delete from dept_back where dept_back.dno = :old.dno;
end;

===============================================

변수명 데이터타입 := 초기값;

*  || 는 or가 아니라 이어주는 역할



문제1) employee 테이블에서 담당업무가 'SALESMAN'인 사원들의
       사원번호, 이름, 급여 컬럼만 emp_copy2 테이블에 추가하시오.
CREATE TABLE emp_copy2 as select * from employee where 1=0; // 구조만 복사함.
insert into emp_copy2 (eno, ename, salary) select eno, ename, salary from employee where job = 'SALESMAN';
 * emp_copy2 테이블에서 job컬럼 삭제
   ㄴ ALTER TABLE emp_copy2 DROP COLUMN job;

문제2) 사원번호가 7902인 사원의 이름과 부서명을 출력하시오.
declare
v_ename employee.ename%type;
v_dname department.dname%type;
begin
select d.dname, e.ename into v_dname, v_ename from employee e, department d  where e.dno = d.dno and e.eno = 7902;
dbms_output.put_line(v_dname || ' => ' || v_ename);
END;
/

문제3) 사원정보 테이블만 이용해서 SCOTT사원에 대한 정보를 다음과 같이 출력하시오.
사원번호   이름   부서명
declare
v_eno employee.eno%type;
v_ename employee.ename%type;
v_dno employee.dno%type;
v_dname varchar2(20) := null;
begin
select eno,ename,dno into v_eno, v_ename, v_dno from employee where ename='SCOTT';
if (v_dno = 10) then
 v_dname := 'ACCOUNTING';
elsif (v_dno = 20) then
 v_dname := 'RESEARCH';
elsif (v_dno = 30) then
 v_dname := 'SALESMAN';
elsif (v_dno = 40) then
 v_dname := 'OPERATIONS';
end if;
dbms_output.put_line('사원번호   이름   부서명');
dbms_output.put_line('=================');
dbms_output.put_line(v_eno || '   ' || v_ename || '   ' || v_dname);
end;
/

문제4) if문을 이용해 KING 사원의 부서번호를 얻어와서 부서번호에 따른 부서명과 지역명을 출력하시오.
declare
 v_dno employee.dno%type;
 v_eno employee.eno%type;
 v_ename employee.ename%type;
 v_dname varchar2(20) := null;
 v_dloc varchar2(20) := null;
begin
select eno,ename,dno into v_eno, v_ename, v_dno from employee where ename='KING';
if (v_dno = 10) then
 v_dname := 'ACCOUNTING';
 v_dloc := 'NEW YORK';
 elsif (v_dno = 20) then
  v_dname := 'RESEARCH';
  v_dloc := 'DALLAS';
 elsif (v_dno = 30) then
  v_dname := 'SALES';
  v_dloc := 'CHICAGO';
end if;
dbms_output.put_line('사원번호   사원이름   부서명   지역명');
dbms_output.put_line('======================================');
dbms_output.put_line(v_eno || '   ' || v_ename || '   ' || v_dname || '   ' || v_dloc);
end;
/

=========================================
		1 ~ 100 구하기 예제 3개 ( loop, for, while )
** loop 예제
declare
 num number := 1;
 tot number := 0;
begin
 loop
 tot := tot + num;
 num := num + 1;
 exit when num > 100;
end loop;
 dbms_output.put_line('1부터 100까지의 합 = ' || tot);
end;
/

** for 예제
declare
 tot number := 0;
begin
 for num in 1 .. 100 loop
 tot := tot + num;
 exit when num > 100;
end loop;
 dbms_output.put_line('1부터 100까지의 합 = ' || tot);
end;
/

** while 예제
declare
 tot number := 0;
 num number := 1;
begin
 while num <= 100 loop
 tot := tot + num;
 num := num + 1;
end loop;
 dbms_output.put_line('1부터 100까지의 합 = ' || tot);
end;
/
=========================================
commission이 null이 아닌 사원을 출력, 이름을 기준으로 오름차순 정렬하라

** cursor 예제
declare
 v_emp employee%rowtype;
 cursor res is select eno, ename, salary from employee where commission is not null order by ename;
begin
 dbms_output.put_line('사원번호   이름   급여');
 dbms_output.put_line('========================');
 open res;
 loop
 fetch res into v_emp.eno, v_emp.ename, v_emp.salary;
  exit when res%notfound;
  dbms_output.put_line(v_emp.eno || '   ' || v_emp.ename || '   ' || v_emp.salary);
 end loop;
 close res;
end;
/

문제5 ) 사원이름을 입력받아 해당 사원의 부서명을 출력하는 함수를 작성하라.
create or replace function fn_get_name(v_ename in employee.ename%type)
return varchar2
is v_dname varchar2(15);
begin
 select d.dname into v_dname from employee e, department d where e.dno = d.dno and v_ename = e.ename;
 return v_dname;
end;

select fn_get_name('SCOTT') 스콧근무부서, fn_get_name('KING') 킹근무부서 from dual;








